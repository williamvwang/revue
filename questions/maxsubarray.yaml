
title: Maximum Subarray
tags:
- easy
- array
- dynamic programming
description: >-
  Given an integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
example: |
  Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4]

  Output: 6
  Explanation: [4, -1, 2, 1] has the largest sum, 6.
explanation: |
  **Kadane's algorithm:**

  Keep two maximums: a local maximum that represents the maximum contiguous subarray sum up to a particular element, and a global maximum
  of all the local maximums seen so far.

  At each element in your traversal, accept and add to the previous local max if its sum with the current element is better than starting
  the local max over at that element.
solution: |
  ```python
  class Solution:
      def maxSubArray(self, nums: List[int]) -> int:
          global_max = local_max = nums[0]
          for i in range(1, len(nums)):
              local_max = max(local_max + nums[i], nums[i])
              global_max = max(global_max, local_max)
          return global_max
  ```