
title: Best Time to Buy and Sell Stock
tags:
- easy
- array
- greedy
description: |
  Say you have an array for which the i-th element is the price of a given stock on day i.

  If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design 
  an algorithm to find the maximum profit.

  Note that you cannot sell a stock before you buy one.
example: |
  Input: [7, 1, 5, 3, 6, 4]
  Output: 5
  Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
  Not 7-1 = 6, as selling price needs to be larger than buying price.
explanation: |
  A the brute-force strategy would involve finding the max value of `prices[j] - prices[i]` for every `i, j` such that `j > i`.

  We can avoid a quadratic brute-force solution by employing a greedy strategy that has the same effect using one pass. The intuition here is to 
  keep track of the the minimum price seen so far in the traversal. This minimum price when subtracted from the current element yields the maximum 
  profit achievable up to that element. Keep track of the maximum profit seen over the course of the entire traversal, which will be the global
  maximum profit. 
solution: |
  ```python
  class Solution:
      def maxProfit(self, prices: List[int]) -> int:
          max_profit = 0
          low = float('inf')
          for price in prices:
              if price < low:
                  low = price
              elif price - low > max_profit:
                  max_profit = price - low
          return max_profit
  ```