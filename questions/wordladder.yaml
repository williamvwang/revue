
title: Word Ladder
tags:
- medium
- bfs
description: |
  Given two words (*beginWord* and *endWord*), and a "dictionary" word list, find the length of the shortest transformation sequence possible from *beginWord* to *endWord*, such that:
  1. Only one letter can be changed at a time.
  2. Each transformed word must exist in the word list. Note that *beginWord* is not a transformed word.
  
  - Return 0 if there is no such transformation sequence.
  - All words have the same length.
  - All words contain only lowercase alphabetic characters.
  - You may assume no duplicates in the word list.
  - You may assume *beginWord* and *endWord* are non-empty and are not the same.
example: |
  Input:
  beginWord = "hit",
  endWord = "cog",
  wordList = ["hot","dot","dog","lot","log","cog"]

  Output: 5

  Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog", return its length 5.
explanation: |
  View this as a graph search problem where vertices are the words in your "dictionary" and edges connect vertices whose words differ by a single character. 
  Thus, a shortest transformation sequence from `beginWord` to `endWord` is equivalent to a shortest path between the two words' representative graph vertices. 
  
  Solving for an unweighted shortest path suggests BFS. We can build a graph of possible transformations from `beginWord` to `endWord` by, at every word along the 
  traversal, enumerating all words differing from that word by a single character, and adding them to our search space if they exist in the word list.
  
  We can keep track of the path length by storing the cumulative traversal length along with each word in our frontier queue.
solution: |
  ```python
  from typing import Set, Iterator
  from collections import deque
  import string

  class Solution:
      def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
          q = deque([(beginWord, 1)])
          seen = set([beginWord])
          word_list = set(wordList)
          while q:
              current = q.popleft()
              for candidate in self.generateNeighbors(current[0], word_list):
                  if candidate == endWord:
                      return current[1] + 1
                  if candidate not in seen:
                      seen.add(candidate)
                      q.append([candidate, current[1] + 1])
          return 0

      def generateNeighbors(self, word: str, wordList: Set[str]) -> Iterator[str]:
          for i in range(len(word)):
              for letter in string.ascii_lowercase:
                  candidate = word[:i] + letter + word[i+1:]
                  if candidate in wordList:
                      yield candidate
  ```